import math
import matplotlib.pyplot as plt


class Nucleus:
    def __init__(self, A: int, Z: int):
        '''
        Инициализация основных значений атома
        '''
        self.A = A  # Массовое число
        self.Z = Z  # Заряд ядра
        self.N = A - Z  # Число нейтронов в ядре

    def binding_energy_per_nucleon(self) -> float:
        '''
        Вычисляет удельную энергию связи для атомного ядра
        '''
        a_v, a_s, a_c, a_a, delta_0 = 15.56, 17.23, 0.7, 23.285, 12.0

        delta = 0
        if self.Z % 2 == 0 and self.N % 2 == 0:
            delta = +delta_0 * self.A ** (-3/4)
        elif self.Z % 2 == 1 and self.N % 2 == 1:
            delta = -delta_0 * self.A ** (-3/4)

        binding_energy = (a_v * self.A - a_s * self.A ** (2/3) 
                          - a_c * self.Z ** 2 / self.A ** (1/3)
                          - a_a * (self.A - 2 * self.Z) ** 2 / self.A + delta)

        return binding_energy / self.A  # Удельная энергия связи

    def atomic_mass(self) -> float:
        '''
        Вычисляет массу атома (в атомных единицах массы)
        '''
        m_p, m_n, m_e = 1.007276, 1.008665, 0.0005486  # массы протона, нейтрона и электрона в а.е.м
        E_bind = self.binding_energy_per_nucleon() * self.A
        mass_nucleus = self.Z * m_p + self.N * m_n - E_bind / 931.5  # перевод МэВ в а.е.м

        return mass_nucleus + self.Z * m_e  # добавляем массу электронов

    def nuclear_radius(self) -> float:
        '''
        Вычисляет радиус ядра (в фемтометрах)
        '''
        R_0 = 1.2  # фм
        return R_0 * self.A ** (1/3)

    def is_stable_to_beta_decay(self) -> bool:
        '''
        Проверяет устойчивость ядра к бета-распада
        '''
        if self.A == 0 or self.Z == 0 or self.N == 0:
            return False
        N_over_Z = self.N / self.Z
        return 1 < N_over_Z < 1.6  # Примерный диапазон устойчивости для легких и средних ядер

    def is_even_even_fission_possible(self) -> bool:
        '''
        Проверяет, возможно ли деление ядра на два четно-четных осколка
        '''
        return self.A % 2 == 0 and self.Z % 2 == 0 and self.N % 2 == 0


# Тестируем класс и строим графики
if __name__ == '__main__':
    nuclei = [Nucleus(238, 92), Nucleus(239, 94), Nucleus(252, 98),
              Nucleus(135, 52), Nucleus(16, 8), Nucleus(60, 28)]

    radii = []
    binding_energies = []
    atomic_numbers = []

    for nucleus in nuclei:
        radii.append(nucleus.nuclear_radius())
        binding_energies.append(nucleus.binding_energy_per_nucleon())
        atomic_numbers.append(nucleus.Z)
        print(f'Атом с Z={nucleus.Z}, A={nucleus.A} - масса: {nucleus.atomic_mass():.4f} а.е.м, '
              f'радиус: {nucleus.nuclear_radius():.2f} фм, '
              f'удельная энергия связи: {nucleus.binding_energy_per_nucleon():.2f} МэВ/нуклон, '
              f'устойчивость к бета-распаду: {nucleus.is_stable_to_beta_decay()}, '
              f'возможно ли четно-четное деление: {nucleus.is_even_even_fission_possible()}')

    # Строим график зависимости радиуса от Z
    plt.figure(figsize=[10, 5])
    plt.plot(atomic_numbers, radii, marker='o', color='b', label='Радиус ядра')
    plt.xlabel('Атомный номер Z')
    plt.ylabel('Радиус ядра (фм)')
    plt.title('Зависимость радиуса ядра от атомного номера Z')
    plt.grid(True)
    plt.legend()
    plt.show()

    # Строим график зависимости удельной энергии связи от Z
    plt.figure(figsize=[10, 5])
    plt.plot(atomic_numbers, binding_energies, marker='x', color='r', label='Удельная энергия связи')
    plt.xlabel('Атомный номер Z')
    plt.ylabel('Удельная энергия связи (МэВ/нуклон)')
    plt.title('Зависимость удельной энергии связи от атомного номера Z')
    plt.grid(True)
    plt.legend()
    plt.show()